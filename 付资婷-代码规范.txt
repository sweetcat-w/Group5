一、代码规范
1.命名规范
简明，易读，无二义性
包名仅使用小写字母和数字（无下划线）。连续的单词只是简单地连接在一起。例如，com.example.deepspace、非 com.example.deepSpace或 com.example.deep_space。
类名用UpperCamelCase编写。
类名通常是名词或名词短语。例如， Character或 ImmutableList。
测试类的名称以 结尾Test，例如HashImplTest。
方法名称用lowerCamelCase编写。例如， sendMessage或 stop。
常量名称使用UPPER_SNAKE_CASE: 所有大写字母，每个单词与下一个单词之间用一个下划线分隔。
非常量字段名称（静态或其他）用lowerCamelCase编写。
参数名称用lowerCamelCase编写。
2.注释规范
应用于类、方法、构造函数的注释立即出现在文档块之后，并且每个注释都列在自己的一行上（即每行一个注释）。
对参数或局部变量上的注释格式化没有特定的规则（当然，当注释是类型使用注释时除外）。
3.排版规范
换行时，第一行（每个续行）之后的每一行至少从原始行缩进 +4。
当有多个连续行时，缩进可以根据需要变化超过+4。通常，两条续行使用相同的缩进级别当且仅当它们以语法上平行的元素开头。
4.变量结构规范
每个变量声明（字段或本地）仅声明一个变量
局部变量通常不会在其包含块或类似块的构造的开头声明。相反，局部变量被声明为接近它们首次使用的点（在合理范围内），以最小化它们的范围。局部变量声明通常具有初始化器，或者在声明后立即初始化。
源文件以UTF-8编码
5.可读性规范
避免使用不易理解的数字，用有意义的标识来替代
6.函数、过程规范
内部函数参数尽量使用基础类型
内部函数返回值尽量使用基础类型
尽量避免返回的列表为null，引起不必要的空指针判断
当传入参数过多时，应封装为参数类
既然参数成组出现，就需要封装一个类去描述这种现象。
尽量用函数替换匿名内部类的实现
拆分复杂匿名内部类实现接口为多个函数类接口
利用return精简不必要的代码
仅保留函数需要的参数
7.程序效率规范
尽量减少代码冗余，提升效率
8.测试规范
单元测试文件名字是由“被测试文件名 + Test”组成
单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的， 执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。 单元测试中不准使用 System.out 来进行人肉验证，必须使用 assert 来验证。
【强制】保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之 间决不能互相调用，也不能依赖执行的先后次序。 反例：method2 需要依赖 method1 的执行，将执行结果作为 method2 的输入。
【强制】单元测试是可以重复执行的，不能受到外界环境的影响。 说明：单元测试通常会被放到持续集成中，每次有代码 check in 时单元测试都会被执行。如果单测对外部 环境（网络、服务、中间件等）有依赖，容易导致持续集成机制的不可用。 正例：为了不受外界环境影响，要求设计代码时就把 SUT 的依赖改成注入，在测试时用 spring 这样的 DI 框架注入一个本地（内存）实现或者 Mock 实现。
