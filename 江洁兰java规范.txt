一、命名规范
方法名、参数名、成员变量、局部变量都统一使用
 lowerCamelCase 风格，必须遵从驼峰形式。
 正例： localValue / getHttpMessage() / inputUserId
1、类名使用
 UpperCamelCase 风格，必须遵从驼峰形式，但以下情形例外： （ 领域模型的相关命名 ）DO / BO / DTO / VO 等。
 正例： MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion
 反例： macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion
2、方法命名具体规范
1、获取单个对象的方法用 get 做前缀，例："getXXX"；
2、获取多个对象的方法用 list 做前缀，例："getXXXList"；
3、获取统计值的方法用 count 做前缀，例："getXXXCount"；
4、插入的方法用 insert 或 save 做前缀，例："insertXXX"；
5、删除的方法用 delete 或 remove 做前缀，例："deleteXXX"；
6、修改的方法用 update 或 modify 做前缀，例："updateXXX"；

二、注释
(1)javadoc注释
对类，接口，公用和保护类变量使用javadoc注释，必须包括描述，参数，返回值，
异常的说明。
例如：
/**

* This is an example of

* Javadoc

* @author darchon

* @version 0.1, 10/11/2002

*/
(2)注释格式
方法的内部采用单行注释，不要和代码同一行。
(3)类内部的成员变量
单行注释。
(4)保持注释的简洁。最好的注释应该是简单明了的注释。注释不必洋洋洒洒，
只需提供足够的信息，使别人能够理解你的代码。
(5)代码做了些什么以及为什么这样做，处理顺序等，特别是复杂的逻辑处理部分，要尽可能的给出详细的注释

三、排版规范
1：java 代码总的排版风格要求是代码清晰易读，便于 Review 和维护。
 2：关键词或者变量和操作符之间加一个空格：
      for(int i = 0; i < 10; i++) {
        int iCont = 1;
      }         
3: 相对独立的代码块与块之间加空行，例如方法之间加上空行
4：较长的语句、表达式要分成多行书写
5：main方法写在整个类的底部

四、变量结构规范
1.常量的命名 (全部大写 ，常加下划线)
常量的名字应该都使用大写字母，并且指出该常量完整含义。
如果一个常量名称由多个单词组成，则应该用下划线来分割这些单词。
例如：MAX_VALUE
2.参数的命名
参数的命名规范和方法的命名规范相同（驼峰形式），而且为了避免阅读程序时造成迷惑，
请在尽量保证参数名称为一个单词的情况下使参数的命名尽可能明确
例如：inputUserId
3.全局变量
对于在多个函数内都要使用的全局变量，在前面再增加“g_”。
例如一个全局的字符串变量：g_strUserInfo。
4.成员变量
POJO类中的任何布尔类型的变量，都不要加is前缀，否则部分框架解析会引起序列化错误。
5.在变量命名时要注意以下几点：
(1)选择有意义的名字，注意每个单词首字母要大写。
(2)在一段函数中不使用同一个变量表示前后意义不同的两个数值。
(3)i、j、k等只作为小型循环的循环索引变量。
(4)避免用Flag来命名状态变量。
(5)用Is来命名逻辑变量，如：blnFileIsFound。通过这种给布尔变量肯定形式的命名方式，
使得其它开发人员能够更为清楚的理解布尔变量所代表的意义

五、可读性规范
1、当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读。
2、符合阅读习惯
判断长度时，if (length >= 10)优于if (10 <= length)。
判断活动是否已经开始，if (startTime <= now && now <= endTime) 优于 if (now <= endTime && startTime <= now)。
减少if嵌套，条件判断的时候优先判断异常情况提前返回，if (!result.isSuccess()) { return false }，成功则继续往下走。
如果if中的条件表达式比较复杂，将复杂的条件表达式封装成一个函数，通过函数名来解释表达式的含义。
3、避免深嵌套
过多的嵌套层次会使代码变得难以阅读和跟踪，为了提高可读性，通常会通过修改代码来减少嵌套的层级：
4、限制行长度
避免代码行水平过长是一种良好的变成习惯，好将代码行的长度限制在 80 个字符左右。

六、函数、过程规范
1、在书写代码的时候，每段代码如果是一个独立的功能，这时应把这些代码单独的抽离到一个函数中，
不要把所有代码全部书写在一个方法中

七、程序效率规范
1、避免使用NEW关键字来创建String对象
2、避免使用不必要的嵌套
过多的嵌套会使代码复杂化，减弱可读性
3、避免在同一行声明不同类型的多个变量，这样做可以使程序更加清晰，避免变量看起来混乱

八、测试规范
1、保持测试的独⽴性
为让测试稳定可靠且便于维护，测试⽤例与用例之间应不能互相调⽤
2、测试是可以重复执⾏的，不应受到外界环境影响
