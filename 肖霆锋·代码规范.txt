一.命名规范
类名使用UpperCamelCase 风格，必须遵从驼峰形式
方法名、参数名、成员变量、局部变量都统一使用lowerCamelCase 风格，必须遵从驼峰形式
常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。
抽象类命名使用 Abstract 或 Base 开头 ； 异常类命名使用 Exception 结尾 ； 测试类命名以它要测试的类的名称开始，以 Test 结尾。枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。
POJO 类中布尔类型的变量，都不要加 is ，否则部分框架解析会引起序列化错误。

二.注释规范
类、类属性、类方法的注释必须使用 Javadoc 规范，使用/**内容*/格式，不得使用 //xxx 方式。
所有的抽象方法(包括接口中的方法)必须要用 Javadoc 注释、除了返回值、参数、 异常说明外，还必须指出该方法做什么事情，实现什么功能。
方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/* */注释，注意与代码对齐。
所有的枚举类型字段必须要有注释，说明每个数据项的用途
代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑 等的修改。

三.排版规范
单行太长需换行
方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。

四.变量结构规范
不允许任何未经定义的常量直接出现在代码中
采用大小写混合的方式，第一个单词的首字母小写，其后单词的首字母大写；变量名不应以下划线或美元符号开头；尽量避免单个字符的变量名，除非是一次性的临时变量。临时变量通常被取名为i，j，k，m和n，它们一般用于整型；c，d，e，它们一般用于字符型；不采用匈牙利命名法则，对不易清楚识别出该变量类型的变量应使用类型名或类型名缩写作其后缀；组件或部件变量使用其类型名或类型名缩写作其后缀；集合类型变量，例如数组和矢量，应采用复数命名或使用表示该集合的名词做后缀。

五.可读性规范
当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读。
类内方法定义顺序依次是：公有方法或保护方法 > 私有方法 > getter / setter方法。

六.函数、过程规范
在一个 switch 块内，每个 case 要么通过 break/return 等来终止，要么注释说明程 序将继续执行到哪一个 case 为止;在一个 switch 块内，都必须包含一个 default 语句并且 放在最后，即使它什么代码也没有。
在 if/else/for/while/do 语句中必须使用大括号，即使只有一行代码，避免使用 下面的形式:if (condition) statements;
除常用方法(如 getXxx/isXxx)等外，不要在条件判断中执行其它复杂的语句，将复 杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。

七.程序效率规范
StringBuffer或者StringBuilder(线程不安全)来拼接或者操作
字符串就比直接使用String效率高。
避免在循环条件中使用复杂表达式
在不做编译优化的情况下，在循环中，循环条件会被反复计算，如果不使用复杂表达式，而使循环条件值不变的话，程序将会运行的更快。

八.测试规范
测试包结构必须和源码结构保持一致
测试文件名必须由“被测试文件+Test”组成

